
	var charts = [];
	
	function doughnut(stat, data) {
		if(charts.hasOwnProperty(stat)) {
			charts[stat].data.datasets[0].data = data;
			charts[stat].update(1000, false);
		} else {
			Chart.defaults.global.tooltips.enabled = false;
			var ctx = document.getElementById(stat).getContext('2d');
			var data = {
				labels: [],
				datasets: [
					{
						data: data,
						backgroundColor: [
							"#7DCD4E",
							"#CA5151"
						],
						hoverBackgroundColor: [
							"#7DCD4E",
							"#CA5151"
						],
						borderWidth: 0
					}]
			};
			var options = {
				cutoutPercentage: 96

			};
			charts[stat] = new Chart(ctx, {type: 'doughnut',data: data,options: options});
		}
	}		
	
	function pie(stat, data) {
		if(typeof(stat) == "string") {
			var ctx = document.getElementById(stat).getContext('2d');
		} else {
			var ctx = stat.getContext('2d');
		}
		
		var color = '#3A74FA';
		if(arguments[2]) {
			color = arguments[2];
		}
		
		var data = {
			labels: [],
			datasets: [
				{
					data: data,
					backgroundColor: [
						color,
						"#2F3037"
					],
					hoverBackgroundColor: [
						color,
						"#2F3037"
					],
					borderWidth: 0,
					borderColor: '#3A74FA'
				}]
		};
		var options = {'animation' : false};
		charts[stat] = new Chart(ctx, {type: 'pie',data: data,options: options});
	}	
	
	Chart.defaults.global.tooltips.enabled = false;
	
	function display_stats(event) {
		var type = "overall";
		if(type && stats[type]) {
			var kpd_1 = stats[type]['kpd'];
			if(kpd_1 > 1.5) {
				kpd_1 = 1.5;
			}
			kpd_1 = (kpd_1 / 1.5) * 100;
			var kpd_2 = 100 - kpd_1;
			if(kpd<0) {
				kpd_2 = 0;
			}
			
			var rating_1 = stats[type]['rating'] - 0.4;
			if(rating_1 > 0.9) {
				rating_1 = 0.9;
			}
			
			rating_1 = (rating_1 / 0.9) * 100;
			if(rating_1 < 0) {
				rating_1 = 0;
			}
			
			var rating_2 = 100 - rating_1;
			if(rating_2 < 0) {
				rating_2 = 0;
			}

			doughnut('kpd-chart-canvas', [kpd_1, kpd_2]);
			doughnut('rating-chart-canvas', [rating_1, rating_2]);
			pie('1v1-chart-canvas', [stats[type]['1v1'], 100 - stats[type]['1v1']]);
			pie('1v2-chart-canvas', [stats[type]['1v2'], 100 - stats[type]['1v2']]);
			pie('1v3-chart-canvas', [stats[type]['1v3'], 100 - stats[type]['1v3']]);
			pie('1v4-chart-canvas', [stats[type]['1v4'], 100 - stats[type]['1v4']]);
			pie('1v5-chart-canvas', [stats[type]['1v5'], 100 - stats[type]['1v5']]);
		}
	}
	
	(function (window, $) {
	  $(function() {
		$(".ripple").click(function(e){
			if($(this).find(".ink").length == 0) {
				$(this).prepend("<span class='ink'></span>");
			}
			var ink =  $(this).find(".ink");
			ink.css({background: '#000'});
			ink.removeClass("animate");
			
			if(!ink.height() && !ink.width())
			{
				d = Math.max( $(this).outerWidth(),  $(this).outerHeight());
				ink.css({height: d, width: d});
			}
		
			var x = e.pageX -  $(this).offset().left - ink.width()/2;
			var y = e.pageY -  $(this).offset().top - ink.height()/2;
			
			ink.css({top: y+'px', left: x+'px'}).addClass("animate");
		});
		
		$(".chart-js-pie").each(function(){
			if($(this).data('chart-type') == "pie") {
				var ele = false;
				if($(this).attr('id')) {
					ele = $(this).attr('id');
				} else {
					ele = this;
				}
				if($(this).width() && $(this).height()) {
					var color = "#3A74FA";
					if($(this).data('chart-color') && $(this).data('chart-color') != "") {
						color = $(this).data('chart-color');
					}
					
					pie(ele, [$(this).data('chart-value'), 100 - $(this).data('chart-value')], $(this).data('chart-color'), color);
				}
			}
		});
		 
		
	  });
	})(window, jQuery);
	
	function enable_pies() {
		$(".chart-js").each(function(){
			if($(this).data('chart-type') == "pie") {
				var ele = false;
				if($(this).attr('id')) {
					ele = $(this).attr('id');
				} else {
					ele = this;
				}
				if($(this).width() && $(this).height()) {
					var color = "#3A74FA";
					if($(this).data('chart-color') && $(this).data('chart-color') != "") {
						color = $(this).data('chart-color');
					}
					
					pie(ele, [$(this).data('chart-value'), 100 - $(this).data('chart-value')], $(this).data('chart-color'), color);
				}
			}
		});
	}

	function revokeCookies() {
        Cookies.set('cookie_consent', 0);
        $('#cookie-consent').show();
        $('#cookie-nav-link').hide();
	}

	function consentCookies() {
		// Set cookie / hide div.
		Cookies.set('cookie_consent', 1, { expires: 1825 });
		var consentEle = $('#cookie-consent');
		if(consentEle) {
			consentEle.hide();
		}
		var cookieLink = $('#cookie-nav-link');
		if(cookieLink) {
			cookieLink.show();
		}
		return false;
	}

    function readStatus(data) {
        var status = {};
        var levels = {none: 0, minor: 1, major:2, critical:3};
        if(data.incidents.length) {
            for(var i in data.incidents) {
                if(data.incidents[i].impact == 'minor' || data.incidents[i].impact == 'major' || data.incidents[i].impact == 'critical') {
                    if(typeof status.impact !== 'undefined') {
                        status.name = 'Multiple Incidents';
                        status.updated_at = data.updated_at;
                        status.details = 'There are ' + data.incidents.length + ' ongoing incidents, click the view details button for more information';
                        status.url = data.url;
                        if(levels[data.incidents[i].impact] > levels[status.impact]) {
                            status.impact = data.incidents[i].impact;
                        }
                    } else {
                        status.name = data.incidents[i].name;
                        status.updated_at = data.incidents[i].updated_at;
                        status.url = data.incidents[i].shortlink;
                        status.impact = data.incidents[i].impact;
                        status.details = data.incidents[i].incident_updates[0].body;
                    }
                }
            }
        }
        return status;
    }

    function updateStatus(data) {
        if(typeof data.impact !== 'undefined') {
            $('body').addClass('ongoing-incident');
            $('#incident').addClass(data.impact);
            $('#incident-impact').html(data.impact);
            $('#incident-name').html(data.name);
            $('#incident-updated').html(data.updated_at);
            $('#incident-message').html(data.details);
            $('#incident-link').attr('href', data.url);
        } else {
            $('body').removeClass('ongoing-incident');
        }
    }